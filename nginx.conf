# Nginx configuration for Doc Flow Agent frontend
# Proxies API calls to backend services and serves React SPA

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # --- Request/Header size tuning ---
    # 414 Request-URI Too Large typically means the request line (method + URI + protocol)
    # exceeded the compiled buffer limit. By default it's usually 4k or 8k depending on build.
    # Increase per-header initial buffer and allow several larger buffers for oversized
    # request line + headers (query strings with long params, many cookies, etc.).
    # Adjust downward later if not needed; these values are conservative but safe for most systems.
    client_header_buffer_size 64k;      # initial buffer for request line + headers
    large_client_header_buffers 4 256k;  # up to 4 large buffers, each 64k, for very long URIs/headers
    # NOTE: If extremely large query payloads are routine, consider switching those endpoints
    # to POST with JSON body instead of expanding GET query strings indefinitely.

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;
    gzip on;
    gzip_types text/plain application/json application/javascript text/css application/xml text/xml image/svg+xml;

    # Upstream backends (service names from docker-compose network)
    upstream orchestrator_api {
        server orchestrator:8001;
    }
    upstream visualization_api {
        server visualization:8000;
    }

    server {
        listen 80;
        server_name _;
        # Explicit root so try_files resolves actual files and avoids redirect loops
        root /usr/share/nginx/html;

        # Extend proxy timeouts so long-running upstream requests don't 504 after 60s
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        send_timeout 300s;

        # Health check
        location = /healthz {
            add_header Content-Type application/json;
            return 200 '{"status":"ok"}';
        }

        # SOP Docs API (served by visualization service)
        location /api/sop-docs/ {
            proxy_pass http://visualization_api/api/sop-docs/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Visualization trace API now namespaced under /api/traces -> visualization service
        # Must appear before generic /api/ orchestrator rule.
        location /api/traces {
            proxy_pass http://visualization_api/api/traces;
            proxy_set_header Host $host;
            proxy_http_version 1.1;
            proxy_set_header Connection '';
            chunked_transfer_encoding off;
            proxy_buffering off;
            proxy_cache off;
        }

        # Orchestrator API (/api -> orchestrator)
        location /api/ {
            proxy_pass http://orchestrator_api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Visualization endpoints (llm tuning, debug, health)
        location /api/llm-tuning/ {
            proxy_pass http://visualization_api/api/llm-tuning/;
            proxy_set_header Host $host;
        }
        # User communication API endpoints (submit, status)
        location /api/user-comm/ {
            proxy_pass http://visualization_api/api/user-comm/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /debug/ {
            proxy_pass http://visualization_api/debug/;
            proxy_set_header Host $host;
        }
        location = /health {
            proxy_pass http://visualization_api/health;
            proxy_set_header Host $host;
        }

        # Removed old /traces API proxy: /traces path is now reserved for SPA UI route.
        # Legacy API requests to /traces still function via backend shim but will arrive through SPA domain; 
        # if needed you can reintroduce a conditional Accept header based proxy here.

        # LLM tuning HTML page (served by visualization FastAPI at /llm-tuning)
        # Not under /api/, so without this block the SPA fallback would serve index.html instead.
        location /llm-tuning {
            # Normalize trailing slash (optional). If someone hits /llm-tuning/ redirect to /llm-tuning
            if ($request_uri = /llm-tuning/) { return 301 /llm-tuning; }
            proxy_pass http://visualization_api;  # pass original path so upstream sees /llm-tuning
            proxy_set_header Host $host;
        }

        # User communication HTML forms (served by visualization FastAPI at /user-comm/<session>/<task>/)
        # We explicitly proxy these so they don't fall back to the React SPA index.html.
        # Trailing slash matters in FastAPI route definition; normalize requests without trailing slash.
        location ~ ^/user-comm/([^/]+)/([^/]+)$ {
            return 301 /user-comm/$1/$2/;
        }
        location ~ ^/user-comm/([^/]+)/([^/]+)/$ {
            proxy_pass http://visualization_api;  # upstream has route /user-comm/{session_id}/{task_id}/
            proxy_set_header Host $host;
        }

        # Result delivery pages (served by visualization FastAPI at /result-delivery/<session>/<task>/)
        # Similar to user-comm, normalize trailing slash and proxy to FastAPI
        location ~ ^/result-delivery/([^/]+)/([^/]+)$ {
            return 301 /result-delivery/$1/$2/;
        }
        location ~ ^/result-delivery/([^/]+)/([^/]+)/$ {
            proxy_pass http://visualization_api;  # upstream has route /result-delivery/{session_id}/{task_id}/
            proxy_set_header Host $host;
        }
        # Result delivery file downloads
        location ~ ^/result-delivery/([^/]+)/([^/]+)/files/(.+)$ {
            proxy_pass http://visualization_api;  # upstream has route /result-delivery/{session_id}/{task_id}/files/{filename}
            proxy_set_header Host $host;
        }

        # Static assets (served directly). Using =404 prevents looping.
        location /assets/ {
            try_files $uri =404;
        }

        # Favicon (silence not-found noise). Falls back to vite.svg if favicon.ico missing.
        location = /favicon.ico {
            log_not_found off;
            access_log off;
            try_files /favicon.ico /vite.svg =204;
        }

        # Serve index.html explicitly to avoid re-entering generic / location
        location = /index.html {
            # index.html is static; no extra headers needed
        }

        # SPA fallback: check file or directory, else serve index.html
        # This avoids infinite internal redirects by including $uri/ and a terminal fallback.
        location / {
            try_files $uri $uri/ /index.html;
        }
    }
}
