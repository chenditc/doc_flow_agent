/**
 * API client utilities for Doc Flow Trace Viewer
 * Handles all communication with the backend server
 */

class TraceAPI {
    constructor(baseUrl = '') {
        this.baseUrl = baseUrl;
    }

    /**
     * Fetch list of available traces
     * @returns {Promise<Array<string>>} List of trace IDs
     */
    async getTraces() {
        const response = await fetch(`${this.baseUrl}/traces`);
        if (!response.ok) {
            throw new Error(`Failed to fetch traces: ${response.status} ${response.statusText}`);
        }
        return await response.json();
    }

    /**
     * Fetch a specific trace by ID
     * @param {string} traceId - The trace ID to fetch
     * @returns {Promise<Object>} The trace data
     */
    async getTrace(traceId) {
        if (!traceId) {
            throw new Error('Trace ID is required');
        }
        
        const response = await fetch(`${this.baseUrl}/traces/${encodeURIComponent(traceId)}`);
        if (!response.ok) {
            throw new Error(`Failed to fetch trace: ${response.status} ${response.statusText}`);
        }
        
        try {
            return await response.json();
        } catch (error) {
            throw new Error(`Invalid JSON response: ${error.message}`);
        }
    }

    /**
     * Check server health
     * @returns {Promise<Object>} Health status
     */
    async healthCheck() {
        const response = await fetch(`${this.baseUrl}/health`);
        if (!response.ok) {
            throw new Error(`Health check failed: ${response.status} ${response.statusText}`);
        }
        return await response.json();
    }
}

// Create default instance
const traceAPI = new TraceAPI();

// Export for use in other scripts
if (typeof window !== 'undefined') {
    window.TraceAPI = TraceAPI;
    window.traceAPI = traceAPI;
}
