"""
Tests for the visualization server
"""

import pytest
import json
import os
import sys
import tempfile
from pathlib import    def test_real_traces_endpoint(self, real_trace_client):
        """Test with real traces directory (if it exists)"""
        response = real_trace_client.get('/traces')
        assert response.status_code == 200
        data = response.json()
        assert isinstance(data, list)
        # Should have real trace files if they exist

    def test_get_real_trace_if_exists(self, real_trace_client):
        """Test getting a real trace file if any exist"""
        # First get list of available traces
        response = real_trace_client.get('/traces')
        traces = response.json()ittest.mock import patch, MagicMock

# Add project root to path for imports
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

# Test data
MOCK_TRACE_DATA = {
    "session_id": "test-session",
    "start_time": "2025-08-22T10:00:00Z",
    "end_time": "2025-08-22T10:05:00Z",
    "initial_task_description": "Test task",
    "final_status": "completed",
    "task_executions": [
        {
            "task_execution_id": "test-task-1",
            "task_description": "Test task execution",
            "start_time": "2025-08-22T10:00:00Z",
            "end_time": "2025-08-22T10:02:00Z",
            "status": "completed",
            "phases": {
                "test_phase": {
                    "start_time": "2025-08-22T10:00:00Z",
                    "end_time": "2025-08-22T10:01:00Z",
                    "status": "completed"
                }
            }
        }
    ]
}

class TestVizServer:
    """Test cases for the visualization server"""

    @pytest.fixture
    def client(self):
        """Create test client with temporary trace directory"""
        with tempfile.TemporaryDirectory() as temp_dir:
            # Create mock trace file
            trace_file = Path(temp_dir) / "session_test_123.json"
            with open(trace_file, 'w') as f:
                json.dump(MOCK_TRACE_DATA, f)
            
            # Import and configure the server
            with patch('visualization.server.viz_server.TRACES_DIR', Path(temp_dir)):
                from visualization.server.viz_server import app
                from fastapi.testclient import TestClient
                with TestClient(app) as client:
                    yield client

    def test_health_check(self, client):
        """Test health check endpoint"""
        response = client.get('/health')
        assert response.status_code == 200
        data = response.json()
        assert data['status'] == 'ok'

    def test_get_traces(self, client):
        """Test getting list of available traces"""
        response = client.get('/traces')
        assert response.status_code == 200
        data = response.json()
        assert isinstance(data, list)
        assert 'session_test_123' in data

    def test_get_trace_by_id(self, client):
        """Test getting specific trace by ID"""
        response = client.get('/traces/session_test_123')
        assert response.status_code == 200
        data = response.json()
        assert data['session_id'] == 'test-session'
        assert 'task_executions' in data
        assert len(data['task_executions']) == 1

    def test_get_nonexistent_trace(self, client):
        """Test getting trace that doesn't exist"""
        response = client.get('/traces/nonexistent')
        assert response.status_code == 404

    def test_get_trace_invalid_filename(self, client):
        """Test getting trace with invalid filename containing backslash"""
        import urllib.parse
        # Use backslash which should trigger validation
        invalid_trace_id = urllib.parse.quote('invalid\\path', safe='')
        response = client.get(f'/traces/{invalid_trace_id}')
        assert response.status_code == 400

    def test_static_file_serving(self, client):
        """Test that static files are served correctly"""
        response = client.get('/')
        assert response.status_code == 200
        # Should serve the index.html file
        assert b'Doc Flow Trace Viewer' in response.content

    def test_cors_headers(self, client):
        """Test that CORS headers are set for development"""
        # CORS headers only appear in real cross-origin requests, not in TestClient
        # Just verify the middleware is configured by checking the app setup
        from visualization.server.viz_server import app
        
        # Check that CORS middleware is in the middleware stack
        middleware_classes = [middleware.cls for middleware in app.user_middleware]
        from fastapi.middleware.cors import CORSMiddleware
        assert CORSMiddleware in middleware_classes

class TestVizServerIntegration:
    """Integration tests for the visualization server"""

    @pytest.fixture
    def real_trace_client(self):
        """Create test client using real trace directory"""
        from visualization.server.viz_server import app
        from fastapi.testclient import TestClient
        with TestClient(app) as client:
            yield client

    def test_real_traces_endpoint(self, real_trace_client):
        """Test with real traces directory (if it exists)"""
        response = real_trace_client.get('/traces')
        assert response.status_code == 200
        data = response.get_json()
        assert isinstance(data, list)
        # Should return list of trace files (could be empty)

    def test_get_real_trace_if_exists(self, real_trace_client):
        """Test getting a real trace file if any exist"""
        # First get list of available traces
        response = real_trace_client.get('/traces')
        traces = response.get_json()
        
        if traces:
            # Try to get the first trace
            trace_id = traces[0]
            response = real_trace_client.get(f'/traces/{trace_id}')
            assert response.status_code == 200
            data = response.get_json()
            # Should have basic trace structure
            assert 'session_id' in data or 'task_executions' in data
